// 1) CONFIG -------------------------------------------------
const API_BASE = "http://localhost:5000";
const ENDPOINTS = {
  cats: `${API_BASE}/api/cats`,
  alerts: `${API_BASE}/api/alerts`,
  systemConfig: `${API_BASE}/api/system_config`,
  rooms: `${API_BASE}/api/rooms`,
};

const REFRESH_INTERVAL = 5000;

// 2) STATE --------------------------------------------------
let cats = [];
let selectedCatId = null;
let refreshTimer = null;

let rooms = [];                // [{name, cameras:[{label,index}]}]
let currentRoomIndex = null;
let currentCameraIndex = 0;
let cameraTimestampTimer = null;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Alerts
let lastPageId = null; // ‡πÄ‡∏Å‡πá‡∏ö id ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Alerts

function getVisiblePageId() {
  const ids = [
    "homePage","cameraPage","catPage","profilePage",
    "catDetailPage","systemConfigPage","notificationsPage",
    "alertsPage","statisticsPage"
  ];
  for (const id of ids) {
    const el = document.getElementById(id);
    if (el && !el.classList.contains("hidden")) return id;
  }
  return null;
}

// 3) STARTUP ------------------------------------------------
document.addEventListener("DOMContentLoaded", () => {
  fetchCatDataFromAPI();
  refreshTimer = setInterval(updateCatData, REFRESH_INTERVAL);
  loadSystemConfig();
  startAlertsWatcher();

  loadRoomsAndRender();

  // === Bind ‡∏õ‡∏∏‡πà‡∏°/‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Alerts ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ===
  const maybeBind = (id, handler) => {
    const el = document.getElementById(id);
    if (el) el.addEventListener("click", (e) => {
      e.preventDefault?.();
      closeMenu?.();
      handler();
    });
  };
  // ‡∏õ‡∏∏‡πà‡∏°/‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  maybeBind("alertsNav", () => openAlerts(null));
  maybeBind("alertsMenuItem", () => openAlerts(null));
  maybeBind("alertsButton", () => openAlerts(null));
  // ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏°‡∏ß‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏°‡∏ß‡∏ô‡∏±‡πâ‡∏ô
  maybeBind("goAlertsFromCat", () => openAlerts(selectedCatId));

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ class
  document.querySelectorAll(".view-alerts-btn").forEach(btn => {
    btn.addEventListener("click", (e) => {
      e.preventDefault?.();
      closeMenu?.();
      openAlerts(null);
    });
  });
  document.querySelectorAll(".view-alerts-for-this-cat").forEach(btn => {
    btn.addEventListener("click", (e) => {
      e.preventDefault?.();
      closeMenu?.();
      const name = selectedCatId || btn.dataset.catName || null;
      openAlerts(name);
    });
  });

  // ‚Äî‚Äî ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Alerts ‚Äî‚Äî
  const bindBack = (id) => {
    const el = document.getElementById(id);
    if (el) el.addEventListener("click", (e) => {
      e.preventDefault?.();
      goBackFromAlerts();
    });
  };
  bindBack("alertsBackBtn");
  bindBack("backFromAlertsBtn");
  document.querySelectorAll(".alerts-back-btn").forEach(btn => {
    btn.addEventListener("click", (e) => {
      e.preventDefault?.();
      goBackFromAlerts();
    });
  });
});

// ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Alerts (option: ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏°‡∏ß)
function openAlerts(catName = null) {
  if (catName) selectedCatId = catName;
  showAlertsPage();
}

// 4) API HANDLERS ------------------------------------------
function fetchCatDataFromAPI() {
  fetch(ENDPOINTS.cats)
    .then(res => res.json())
    .then(data => {
      cats = data;
      renderCatCards(cats);
    })
    .catch(handleFetchError);
}

function updateCatData() {
  fetch(ENDPOINTS.cats)
    .then(res => res.json())
    .then(data => {
      cats = data;
      renderCatCards(cats);
      updateOpenCatDetail();
    })
    .catch(handleFetchError);
}

function handleFetchError(err) {
  console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏ß:", err);
  if (!document.body.dataset.alerted) {
    alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Flask ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà");
    document.body.dataset.alerted = "true";
  }
}

// 4.1) ROOMS -----------------------------------------------
function loadRoomsAndRender() {
  fetch(ENDPOINTS.rooms)
    .then(res => res.json())
    .then(data => {
      rooms = Array.isArray(data) ? data : [];
      renderRoomCards(rooms);
    })
    .catch(err => {
      console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á/‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    });
}

function renderRoomCards(roomList) {
  const grid = document.querySelector(".room-grid");
  if (!grid) return;
  grid.innerHTML = "";
  roomList.forEach((room, idx) => {
    const card = document.createElement("div");
    card.className = "room-card";
    card.onclick = () => selectRoom(idx);
    card.innerHTML = `
      <div class="room-preview">
        <div class="live-preview">
          <div class="camera-placeholder">üìπ</div>
        </div>
      </div>
      <h3>${capitalize(room.name || "Room")}</h3>
      <button class="select-btn">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á</button>
    `;
    grid.appendChild(card);
  });
}

function capitalize(s) {
  if (!s) return "";
  return s.charAt(0).toUpperCase() + s.slice(1);
}

// 5) RENDER (CAT GALLERY) ----------------------------------
function renderCatCards(catList) {
  const container = document.querySelector(".cat-grid");
  if (!container) return;
  container.innerHTML = "";

  const seen = new Set();
  catList.forEach((cat) => {
    if (seen.has(cat.name)) return;
    seen.add(cat.name);

    const card = document.createElement("div");
    card.className = "cat-card";
    card.onclick = () => selectCat(cat.name);

    card.innerHTML = `
      <img src="${cat.image_url}" alt="${cat.name}" class="cat-image">
      <h3>${cat.name}</h3>
    `;
    container.appendChild(card);
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Cat Page
function showCatPage() {
  selectedCatId = null;
  currentRoomIndex = null;
  document.getElementById("homePage").classList.add("hidden");
  document.getElementById("cameraPage").classList.add("hidden");
  document.getElementById("catPage").classList.remove("hidden");
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
  document.getElementById("notificationsPage").classList.add("hidden");
}

// 6) CAT DETAIL --------------------------------------------
function selectCat(catName) {
  const cat = cats.find((c) => c.name === catName);
  if (!cat) return;

  selectedCatId = catName;
  document.getElementById("catDetailName").textContent = cat.name;
  document.getElementById("catProfileName").textContent = `Name ${cat.name}`;
  document.getElementById("catDetailImage").src = cat.image_url;
  document.getElementById("catLocation").textContent = cat.current_room || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö";
  document.getElementById("catPage").classList.add("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
  document.getElementById("catDetailPage").classList.remove("hidden");
}

function goBackToCatGallery() {
  selectedCatId = null;
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("catPage").classList.remove("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
}

function updateOpenCatDetail() {
  if (selectedCatId && !document.getElementById("catDetailPage").classList.contains("hidden")) {
    const cat = cats.find((c) => c.name === selectedCatId);
    if (cat) {
      document.getElementById("catLocation").textContent = cat.current_room || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö";
    }
  }
}

// 7) ROOM & CAMERA NAVIGATION ------------------------------
function selectRoom(index) {
  if (index < 0 || index >= rooms.length) return;
  currentRoomIndex = index;
  currentCameraIndex = 0;

  document.getElementById("homePage").classList.add("hidden");
  document.getElementById("cameraPage").classList.remove("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");

  updateCameraUI();

  if (cameraTimestampTimer) clearInterval(cameraTimestampTimer);
  cameraTimestampTimer = setInterval(() => {
    document.getElementById("timestamp").textContent = new Date().toLocaleString();
  }, 1000);
}

function updateCameraUI() {
  if (currentRoomIndex === null) return;

  const room = rooms[currentRoomIndex] || {};
  const cams = room.cameras || [];
  const cam = cams[currentCameraIndex];

  document.getElementById("currentRoomName").textContent = capitalize(room.name || "Room");
  document.getElementById("cameraInfo").textContent = cams.length
    ? `‡∏Å‡∏•‡πâ‡∏≠‡∏á ${currentCameraIndex + 1} ‡∏à‡∏≤‡∏Å ${cams.length}`
    : `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ`;

  const feed = cam ? `${API_BASE}/video_feed/${room.name}/${cam.index}` : "";
  document.getElementById("cameraFeed").innerHTML = cam
    ? `<img src="${feed}" style="width:100%; height:100%; object-fit:cover;" alt="${cam.label}">`
    : `<div class="simulated-video"><div class="camera-placeholder large">üìπ</div><p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á</p></div>`;

  const prevBtn = document.querySelector(".camera-controls .nav-btn:first-child");
  const nextBtn = document.querySelector(".camera-controls .nav-btn:last-child");
  if (prevBtn) prevBtn.disabled = currentCameraIndex <= 0;
  if (nextBtn) nextBtn.disabled = currentCameraIndex >= cams.length - 1;

  document.getElementById("timestamp").textContent = new Date().toLocaleString();
}

function previousCamera() {
  if (currentRoomIndex === null) return;
  if (currentCameraIndex > 0) {
    currentCameraIndex--;
    updateCameraUI();
  }
}

function nextCamera() {
  if (currentRoomIndex === null) return;
  const cams = rooms[currentRoomIndex]?.cameras || [];
  if (currentCameraIndex < cams.length - 1) {
    currentCameraIndex++;
    updateCameraUI();
  }
}

function goBack() {
  currentRoomIndex = null;
  if (cameraTimestampTimer) {
    clearInterval(cameraTimestampTimer);
    cameraTimestampTimer = null;
  }
  document.getElementById("cameraPage").classList.add("hidden");
  document.getElementById("homePage").classList.remove("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
}

// 8) PAGE NAVIGATION --------------------------------------
function showHomePage() {
  selectedCatId = null;
  currentRoomIndex = null;
  if (cameraTimestampTimer) {
    clearInterval(cameraTimestampTimer);
    cameraTimestampTimer = null;
  }
  document.getElementById("homePage").classList.remove("hidden");
  document.getElementById("cameraPage").classList.add("hidden");
  document.getElementById("catPage").classList.add("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
  document.getElementById("notificationsPage").classList.add("hidden");
}

function showNotificationsPage() {
  selectedCatId = null;
  currentRoomIndex = null;
  document.getElementById("homePage").classList.add("hidden");
  document.getElementById("cameraPage").classList.add("hidden");
  document.getElementById("catPage").classList.add("hidden");
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
  document.getElementById("notificationsPage").classList.remove("hidden");
}

// 9) HAMBURGER MENU ---------------------------------------
function toggleMenu() {
  const menu = document.getElementById("navMenu");
  const overlay = document.getElementById("menuOverlay");
  const hamburgerBtn = document.querySelector(".hamburger-btn");

  if (menu.classList.contains("hidden")) {
    menu.classList.remove("hidden");
    menu.classList.add("show");
    overlay.classList.add("show");
    hamburgerBtn.classList.add("active");
    hamburgerBtn.innerHTML = "X";
  } else {
    closeMenu();
  }
}

function closeMenu() {
  const menu = document.getElementById("navMenu");
  const overlay = document.getElementById("menuOverlay");
  const hamburgerBtn = document.querySelector(".hamburger-btn");

  menu.classList.remove("show");
  overlay.classList.remove("show");
  hamburgerBtn.classList.remove("active");
  hamburgerBtn.innerHTML = "‚ò∞";

  setTimeout(() => menu.classList.add("hidden"), 300);
}

// 10) STATISTICS PAGE --------------------------------------
function updateStatistics() {
  searchStatistics();
}

function updateDateFilter() {
  const period = document.getElementById("periodSelect").value;
  const monthSelect = document.getElementById("monthSelect");
  if (period === "yearly") {
    monthSelect.style.display = "none";
  } else {
    monthSelect.style.display = "inline-block";
  }
}

function searchStatistics() {
  console.log("Statistics search functionality not implemented yet");
}

// 11) ALERTS PAGE ------------------------------------------
function loadAlerts() {
  fetch(ENDPOINTS.alerts)
    .then(res => res.json())
    .then(alerts => {
      const list = document.getElementById("alertsList");
      list.innerHTML = "";

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ß
      const byCat = alerts.reduce((acc, a) => {
        const cat = a.cat || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
        (acc[cat] ||= []).push(a);
        return acc;
      }, {});

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Cat Detail ‡πÅ‡∏•‡∏∞‡∏°‡∏µ selectedCatId ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ß‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô
      const catsToRender = selectedCatId ? [selectedCatId] : Object.keys(byCat).sort();

      // ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏°‡∏µ selectedCatId)
      if (selectedCatId) {
        const filterBar = document.createElement("div");
        filterBar.style.marginBottom = "10px";
        filterBar.innerHTML = `
          <div style="display:flex;align-items:center;gap:8px;">
            <span>‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏°‡∏ß: <strong>${selectedCatId}</strong></span>
            <button class="clear-filter-btn" onclick="(function(){ selectedCatId=null; loadAlerts(); })()">‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</button>
          </div>
        `;
        list.appendChild(filterBar);
      }

      if (catsToRender.length === 0) {
        list.innerHTML += `<div class="alert-item">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</div>`;
        return;
      }

      const priorityClass = (type) => {
        switch (type) {
          case "no_cat":       return "high-priority";
          case "no_eating":    return "high-priority";
          case "low_excrete":  return "medium-priority";
          case "high_excrete": return "medium-priority";
          case "low_sleep":    return "low-priority";
          case "high_sleep":   return "low-priority";
          default:             return "";
        }
      };

      // ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏°‡∏ß
      catsToRender.forEach(cat => {
        const groupWrap = document.createElement("div");
        groupWrap.className = "alert-cat-group";

        const header = document.createElement("div");
        header.className = "alert-cat-title";
        header.textContent = cat;
        groupWrap.appendChild(header);

        const itemsWrap = document.createElement("div");
        itemsWrap.className = "alert-items";

        (byCat[cat] || []).forEach(a => {
          const item = document.createElement("div");
          item.className = `alert-item ${priorityClass(a.type)}`;
          item.innerHTML = `
            <div class="alert-line">
              <span class="alert-type-tag">${a.type}</span>
              <span class="alert-text">${a.message}</span>
            </div>
          `;
          itemsWrap.appendChild(item);
        });

        groupWrap.appendChild(itemsWrap);
        list.appendChild(groupWrap);
      });
    })
    .catch(err => console.error("Error loading alerts:", err));
}

// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Alerts ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ (‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°)
function showAlertsPage() {
  // ‡∏à‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö
  lastPageId = getVisiblePageId();

  // ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  ["homePage","cameraPage","catPage","profilePage","catDetailPage","systemConfigPage","notificationsPage","statisticsPage"]
    .forEach(id => document.getElementById(id)?.classList.add("hidden"));

  // ‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏ô‡πâ‡∏≤ Alerts
  document.getElementById("alertsPage")?.classList.remove("hidden");

  // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (group by cat + ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö selectedCatId)
  if (typeof loadAlerts === "function") loadAlerts();
}

// ‚¨ÖÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Alerts
function goBackFromAlerts() {
  // ‡∏ã‡πà‡∏≠‡∏ô Alerts ‡∏Å‡πà‡∏≠‡∏ô
  document.getElementById("alertsPage")?.classList.add("hidden");

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡∏à‡∏≥‡πÑ‡∏ß‡πâ‡∏Å‡πá‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö Home
  if (lastPageId && document.getElementById(lastPageId)) {
    document.getElementById(lastPageId).classList.remove("hidden");
  } else {
    showHomePage();
  }

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
  lastPageId = null;
}

// 12) PROFILE ----------------------------------------------
function showProfilePage() {
  document.getElementById("homePage").classList.add("hidden");
  document.getElementById("profilePage").classList.remove("hidden");
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
  document.getElementById("notificationsPage").classList.add("hidden");
}

function showMyInformation() {
  alert("‡∏ä‡∏∑‡πà‡∏≠: Kamonrat\n‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏°‡∏ß");
}

function showNotificationSettings() {
  alert("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
}

function signOut() {
  alert("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  showHomePage();
}

// 13) CAT STATISTICS NAV -----------------------------------
function showCatStatisticsPage() {
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("statisticsPage").classList.remove("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
}

function goBackFromStatistics() {
  document.getElementById("statisticsPage").classList.add("hidden");
  document.getElementById("catDetailPage").classList.remove("hidden");
  document.getElementById("systemConfigPage").classList.add("hidden");
}

// 14) SYSTEM CONFIG ----------------------------------------
function showSystemConfigPage() {
  document.getElementById("profilePage").classList.add("hidden");
  document.getElementById("systemConfigPage").classList.remove("hidden");
  document.getElementById("homePage").classList.add("hidden");
  document.getElementById("catDetailPage").classList.add("hidden");
  document.getElementById("notificationsPage").classList.add("hidden");
}

function loadSystemConfig() {
  fetch(ENDPOINTS.systemConfig)
    .then(res => res.json())
    .then(data => {
      const get = id => document.getElementById(id);
      const map = [
        ["alertNoCat", "alertNoCat"],
        ["alertNoEating", "alertNoEating"],
        ["minExcretion", "minExcretion"],
        ["maxExcretion", "maxExcretion"],
        ["minSleep", "minSleep"],
        ["maxSleep", "maxSleep"],
        ["maxCats", "maxCats"],
      ];
      map.forEach(([key, id]) => {
        const el = get(id);
        if (el && data[key] !== undefined && data[key] !== null) el.value = data[key];
      });
    })
    .catch(err => {
      console.error("Error loading system config:", err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö");
    });
}

function saveSystemConfig() {
  const num = id => parseFloat(document.getElementById(id)?.value);
  const config = {
    alertNoCat:    num('alertNoCat'),
    alertNoEating: num('alertNoEating'),
    minExcretion:  num('minExcretion'),
    maxExcretion:  num('maxExcretion'),
    minSleep:      num('minSleep'),
    maxSleep:      num('maxSleep'),
    maxCats:       num('maxCats'),
  };

  if (!(config.alertNoCat >= 1 && config.alertNoCat <= 48))      return alert('Alert No Cat ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á');
  if (!(config.alertNoEating >= 1 && config.alertNoEating <= 24)) return alert('Alert No Eating ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-24 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô');
  if (!(config.minExcretion < config.maxExcretion))               return alert('Minimum Excretion ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Maximum Excretion');
  if (!(config.minSleep < config.maxSleep))                       return alert('Minimum Sleep ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Maximum Sleep');
  if (!(config.maxCats >= 1))                                     return alert('Max Cats ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1');

  fetch(ENDPOINTS.systemConfig, {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify(config),
  })
  .then(res => res.json())
  .then(() => alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'))
  .catch(() => alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'));
}

function resetSystemConfig() {
  fetch(`${ENDPOINTS.systemConfig}/reset`, { method: 'POST' })
    .then(res => res.json())
    .then(() => {
      loadSystemConfig();
      alert('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
    })
    .catch(() => alert('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'));
}

// 15) NOTIFICATION BADGE -----------------------------------
function updateNotificationBadge() {
  fetch(ENDPOINTS.alerts)
    .then(res => res.json())
    .then(alerts => {
      document.getElementById("notificationBadge").textContent = alerts.length;
    })
    .catch(err => console.error("Error updating badge:", err));
}
setInterval(updateNotificationBadge, 60000);
updateNotificationBadge();

// 16) alerts ------------------------------------------------
const ALERTS_POLL_MS = 60_000;

// ===== B) UTIL =====
const TODAY = () => new Date().toISOString().slice(0,10);
const SEEN_KEY = () => `alerts_seen_${TODAY()}`;
function loadSeen() {
  try { return new Set(JSON.parse(localStorage.getItem(SEEN_KEY()) || "[]")); }
  catch { return new Set(); }
}
function saveSeen(seen) {
  localStorage.setItem(SEEN_KEY(), JSON.stringify(Array.from(seen)));
}
function makeKey(a) {
  return `${TODAY()}|${a.type}|${a.cat}|${a.message}`;
}

// ===== C) Browser Notification =====
function requestNotificationPermissionOnce() {
  if (!("Notification" in window)) return;
  if (Notification.permission === "default") {
    Notification.requestPermission().catch(()=>{});
  }
}
function notifyBrowser(title, body) {
  if (!("Notification" in window)) return;
  if (Notification.permission === "granted") {
    try { new Notification(title, { body }); } catch {}
  }
}

// ===== D) Toast ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ =====
function ensureToastContainer() {
  let c = document.getElementById("toastContainer");
  if (!c) {
    c = document.createElement("div");
    c.id = "toastContainer";
    Object.assign(c.style, {
      position: "fixed", right: "20px", bottom: "20px",
      display: "flex", flexDirection: "column", gap: "10px", zIndex: 9999
    });
    document.body.appendChild(c);
  }
  return c;
}
function showToast(text) {
  const c = ensureToastContainer();
  const box = document.createElement("div");
  Object.assign(box.style, {
    background: "#111", color: "#fff", padding: "12px 14px",
    borderRadius: "10px", boxShadow: "0 8px 24px rgba(0,0,0,0.2)",
    maxWidth: "360px", fontSize: "14px", lineHeight: 1.4
  });
  box.textContent = text;
  c.appendChild(box);
  setTimeout(()=> box.remove(), 6000);
}

// ===== E) Watcher ‡∏´‡∏•‡∏±‡∏Å =====
let alertsTimer = null;
function startAlertsWatcher() {
  requestNotificationPermissionOnce();
  let seen = loadSeen();

  const tick = () => {
    fetch(ENDPOINTS.alerts)
      .then(r => r.json())
      .then(list => {
        let changed = false;
        list.forEach(a => {
          const key = makeKey(a);
          if (!seen.has(key)) {
            notifyBrowser(`Cat Alert: ${a.cat}`, a.message);
            showToast(`üö® ${a.cat}: ${a.message}`);
            seen.add(key);
            changed = true;
          }
        });
        if (changed) saveSeen(seen);

        const open = !document.getElementById("alertsPage")?.classList.contains("hidden");
        if (open && typeof loadAlerts === "function") loadAlerts();
      })
      .catch(()=>{});
  };

  tick();
  if (alertsTimer) clearInterval(alertsTimer);
  alertsTimer = setInterval(tick, ALERTS_POLL_MS);
}
